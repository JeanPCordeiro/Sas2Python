// Generated from SAS.g4 by ANTLR 4.13.2
// jshint ignore: start
//import antlr4 from 'antlr4';


// import { parse } from 'node-html-parser';
const antlr4 = require('antlr4');


const serializedATN = [4,0,30,194,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,
1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,
1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
24,1,24,5,24,138,8,24,10,24,12,24,141,9,24,1,25,4,25,144,8,25,11,25,12,25,
145,1,25,1,25,4,25,150,8,25,11,25,12,25,151,3,25,154,8,25,1,26,1,26,5,26,
158,8,26,10,26,12,26,161,9,26,1,26,1,26,1,27,4,27,166,8,27,11,27,12,27,167,
1,27,1,27,1,28,1,28,1,28,1,28,5,28,176,8,28,10,28,12,28,179,9,28,1,28,1,
28,1,28,1,28,1,28,1,29,1,29,5,29,188,8,29,10,29,12,29,191,9,29,1,29,1,29,
2,159,177,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
49,25,51,26,53,27,55,28,57,29,59,30,1,0,5,3,0,65,90,95,95,97,122,4,0,48,
57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,201,
0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,66,1,0,0,0,5,68,1,0,0,0,7,72,1,0,0,0,
9,77,1,0,0,0,11,79,1,0,0,0,13,82,1,0,0,0,15,87,1,0,0,0,17,92,1,0,0,0,19,
95,1,0,0,0,21,99,1,0,0,0,23,103,1,0,0,0,25,107,1,0,0,0,27,110,1,0,0,0,29,
112,1,0,0,0,31,114,1,0,0,0,33,117,1,0,0,0,35,120,1,0,0,0,37,123,1,0,0,0,
39,125,1,0,0,0,41,127,1,0,0,0,43,129,1,0,0,0,45,131,1,0,0,0,47,133,1,0,0,
0,49,135,1,0,0,0,51,143,1,0,0,0,53,155,1,0,0,0,55,165,1,0,0,0,57,171,1,0,
0,0,59,185,1,0,0,0,61,62,5,68,0,0,62,63,5,65,0,0,63,64,5,84,0,0,64,65,5,
65,0,0,65,2,1,0,0,0,66,67,5,59,0,0,67,4,1,0,0,0,68,69,5,82,0,0,69,70,5,85,
0,0,70,71,5,78,0,0,71,6,1,0,0,0,72,73,5,80,0,0,73,74,5,82,0,0,74,75,5,79,
0,0,75,76,5,67,0,0,76,8,1,0,0,0,77,78,5,61,0,0,78,10,1,0,0,0,79,80,5,73,
0,0,80,81,5,70,0,0,81,12,1,0,0,0,82,83,5,84,0,0,83,84,5,72,0,0,84,85,5,69,
0,0,85,86,5,78,0,0,86,14,1,0,0,0,87,88,5,69,0,0,88,89,5,76,0,0,89,90,5,83,
0,0,90,91,5,69,0,0,91,16,1,0,0,0,92,93,5,68,0,0,93,94,5,79,0,0,94,18,1,0,
0,0,95,96,5,69,0,0,96,97,5,78,0,0,97,98,5,68,0,0,98,20,1,0,0,0,99,100,5,
83,0,0,100,101,5,69,0,0,101,102,5,84,0,0,102,22,1,0,0,0,103,104,5,65,0,0,
104,105,5,78,0,0,105,106,5,68,0,0,106,24,1,0,0,0,107,108,5,79,0,0,108,109,
5,82,0,0,109,26,1,0,0,0,110,111,5,60,0,0,111,28,1,0,0,0,112,113,5,62,0,0,
113,30,1,0,0,0,114,115,5,60,0,0,115,116,5,61,0,0,116,32,1,0,0,0,117,118,
5,62,0,0,118,119,5,61,0,0,119,34,1,0,0,0,120,121,5,126,0,0,121,122,5,61,
0,0,122,36,1,0,0,0,123,124,5,43,0,0,124,38,1,0,0,0,125,126,5,45,0,0,126,
40,1,0,0,0,127,128,5,42,0,0,128,42,1,0,0,0,129,130,5,47,0,0,130,44,1,0,0,
0,131,132,5,40,0,0,132,46,1,0,0,0,133,134,5,41,0,0,134,48,1,0,0,0,135,139,
7,0,0,0,136,138,7,1,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,
139,140,1,0,0,0,140,50,1,0,0,0,141,139,1,0,0,0,142,144,7,2,0,0,143,142,1,
0,0,0,144,145,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,153,1,0,0,0,147,
149,5,46,0,0,148,150,7,2,0,0,149,148,1,0,0,0,150,151,1,0,0,0,151,149,1,0,
0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,147,1,0,0,0,153,154,1,0,0,0,154,
52,1,0,0,0,155,159,5,39,0,0,156,158,9,0,0,0,157,156,1,0,0,0,158,161,1,0,
0,0,159,160,1,0,0,0,159,157,1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,
163,5,39,0,0,163,54,1,0,0,0,164,166,7,3,0,0,165,164,1,0,0,0,166,167,1,0,
0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,6,27,0,0,170,
56,1,0,0,0,171,172,5,47,0,0,172,173,5,42,0,0,173,177,1,0,0,0,174,176,9,0,
0,0,175,174,1,0,0,0,176,179,1,0,0,0,177,178,1,0,0,0,177,175,1,0,0,0,178,
180,1,0,0,0,179,177,1,0,0,0,180,181,5,42,0,0,181,182,5,47,0,0,182,183,1,
0,0,0,183,184,6,28,0,0,184,58,1,0,0,0,185,189,5,42,0,0,186,188,8,4,0,0,187,
186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,192,1,0,
0,0,191,189,1,0,0,0,192,193,6,29,0,0,193,60,1,0,0,0,9,0,139,145,151,153,
159,167,177,189,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class SASLexer extends antlr4.Lexer {

    static grammarFileName = "SAS.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'DATA'", "';'", "'RUN'", "'PROC'", "'='", 
                         "'IF'", "'THEN'", "'ELSE'", "'DO'", "'END'", "'SET'", 
                         "'AND'", "'OR'", "'<'", "'>'", "'<='", "'>='", 
                         "'~='", "'+'", "'-'", "'*'", "'/'", "'('", "')'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, "ID", "NUMBER", "STRING", "WS", "COMMENT", 
                          "LINE_COMMENT" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "T__21", "T__22", "T__23", "ID", 
                      "NUMBER", "STRING", "WS", "COMMENT", "LINE_COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

SASLexer.EOF = antlr4.Token.EOF;
SASLexer.T__0 = 1;
SASLexer.T__1 = 2;
SASLexer.T__2 = 3;
SASLexer.T__3 = 4;
SASLexer.T__4 = 5;
SASLexer.T__5 = 6;
SASLexer.T__6 = 7;
SASLexer.T__7 = 8;
SASLexer.T__8 = 9;
SASLexer.T__9 = 10;
SASLexer.T__10 = 11;
SASLexer.T__11 = 12;
SASLexer.T__12 = 13;
SASLexer.T__13 = 14;
SASLexer.T__14 = 15;
SASLexer.T__15 = 16;
SASLexer.T__16 = 17;
SASLexer.T__17 = 18;
SASLexer.T__18 = 19;
SASLexer.T__19 = 20;
SASLexer.T__20 = 21;
SASLexer.T__21 = 22;
SASLexer.T__22 = 23;
SASLexer.T__23 = 24;
SASLexer.ID = 25;
SASLexer.NUMBER = 26;
SASLexer.STRING = 27;
SASLexer.WS = 28;
SASLexer.COMMENT = 29;
SASLexer.LINE_COMMENT = 30;



